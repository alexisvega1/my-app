version: '3.8'

services:
  # Connectomics Pipeline
  connectomics-pipeline:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: connectomics-pipeline
    environment:
      - ENVIRONMENT=production
      - CUDA_VISIBLE_DEVICES=0
    volumes:
      - ../data:/app/data
      - ../checkpoints:/app/checkpoints
      - ../logs:/app/logs
    ports:
      - "8000:8000"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    depends_on:
      - prometheus
      - grafana
    networks:
      - connectomics-network

  # Model Server API
  model-server:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.server
    container_name: model-server
    environment:
      - ENVIRONMENT=production
      - MODEL_PATH=/app/checkpoints/best_model.pt
    volumes:
      - ../checkpoints:/app/checkpoints
    ports:
      - "8001:8000"
    depends_on:
      - connectomics-pipeline
    networks:
      - connectomics-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - connectomics-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - connectomics-network

  # Redis for caching and job queues
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - connectomics-network

  # Celery worker for background tasks
  celery-worker:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.worker
    container_name: celery-worker
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ../data:/app/data
      - ../checkpoints:/app/checkpoints
    depends_on:
      - redis
    networks:
      - connectomics-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - model-server
      - grafana
    networks:
      - connectomics-network

volumes:
  prometheus_data:
  grafana_data:
  redis_data:

networks:
  connectomics-network:
    driver: bridge 