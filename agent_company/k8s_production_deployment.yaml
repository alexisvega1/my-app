apiVersion: v1
kind: ConfigMap
metadata:
  name: connectomics-config
  namespace: connectomics
data:
  production_config.yaml: |
    # Production Configuration for Exabyte-Scale Connectomics
    max_memory_gb: 1024
    max_cpu_cores: 128
    max_gpu_memory_gb: 80
    use_mixed_precision: true
    use_gradient_checkpointing: true
    
    # Distributed processing
    num_nodes: 100
    gpus_per_node: 8
    workers_per_node: 16
    batch_size_per_gpu: 4
    
    # Data management
    chunk_size: [512, 512, 512]
    overlap_size: [64, 64, 64]
    compression_level: 6
    use_memory_mapping: true
    cache_size_gb: 100
    
    # Fault tolerance
    max_retries: 3
    checkpoint_interval: 1000
    backup_interval: 10000
    health_check_interval: 30
    
    # Monitoring
    enable_telemetry: true
    metrics_interval: 60
    
    # Storage
    storage_backend: "zarr"
    storage_path: "/data/connectomics"
    temp_dir: "/tmp/connectomics"
    
    # Alert thresholds
    alert_thresholds:
      memory_usage: 0.9
      gpu_memory_usage: 0.95
      disk_usage: 0.85
      error_rate: 0.01

---
apiVersion: v1
kind: Secret
metadata:
  name: connectomics-secrets
  namespace: connectomics
type: Opaque
data:
  # Base64 encoded secrets
  storage-credentials: <base64-encoded-storage-credentials>
  model-weights-url: <base64-encoded-model-url>

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: connectomics-pipeline
  namespace: connectomics
  labels:
    app: connectomics-pipeline
spec:
  serviceName: connectomics-pipeline
  replicas: 100  # Scale to 100 nodes for exabyte processing
  selector:
    matchLabels:
      app: connectomics-pipeline
  template:
    metadata:
      labels:
        app: connectomics-pipeline
    spec:
      # Node affinity for GPU nodes
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: nvidia.com/gpu.count
                operator: Gt
                values:
                - "0"
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - connectomics-pipeline
              topologyKey: kubernetes.io/hostname
      
      # Priority class for high-priority processing
      priorityClassName: high-priority
      
      # Security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      
      containers:
      - name: connectomics-worker
        image: connectomics:latest
        imagePullPolicy: Always
        
        # Resource limits for production
        resources:
          requests:
            memory: "512Gi"
            cpu: "64"
            nvidia.com/gpu: "8"
          limits:
            memory: "1Ti"
            cpu: "128"
            nvidia.com/gpu: "8"
        
        # Environment variables
        env:
        - name: NODE_RANK
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: WORLD_SIZE
          value: "100"
        - name: MASTER_ADDR
          value: "connectomics-master.connectomics.svc.cluster.local"
        - name: MASTER_PORT
          value: "29500"
        - name: NCCL_DEBUG
          value: "INFO"
        - name: NCCL_IB_DISABLE
          value: "0"
        - name: NCCL_P2P_DISABLE
          value: "0"
        - name: OMP_NUM_THREADS
          value: "64"
        - name: MKL_NUM_THREADS
          value: "64"
        
        # Volume mounts
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: data-volume
          mountPath: /data
        - name: temp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /cache
        - name: secrets-volume
          mountPath: /app/secrets
          readOnly: true
        
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        
        # Startup probe
        startupProbe:
          httpGet:
            path: /startup
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 30
        
        # Command and args
        command: ["python"]
        args:
        - "/app/production_distributed_connectomics.py"
        - "--config"
        - "/app/config/production_config.yaml"
        - "--node-rank"
        - "$(NODE_RANK)"
        - "--world-size"
        - "$(WORLD_SIZE)"
        - "--master-addr"
        - "$(MASTER_ADDR)"
        - "--master-port"
        - "$(MASTER_PORT)"
        
        # Ports
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 29500
          name: distributed
        
      # Volumes
      volumes:
      - name: config-volume
        configMap:
          name: connectomics-config
      - name: data-volume
        persistentVolumeClaim:
          claimName: connectomics-data-pvc
      - name: temp-volume
        emptyDir:
          sizeLimit: 100Gi
      - name: cache-volume
        persistentVolumeClaim:
          claimName: connectomics-cache-pvc
      - name: secrets-volume
        secret:
          secretName: connectomics-secrets
      
      # Image pull secrets
      imagePullSecrets:
      - name: connectomics-registry-secret
      
      # Termination grace period
      terminationGracePeriodSeconds: 300

---
apiVersion: v1
kind: Service
metadata:
  name: connectomics-pipeline
  namespace: connectomics
spec:
  selector:
    app: connectomics-pipeline
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  - name: distributed
    port: 29500
    targetPort: 29500
  type: ClusterIP

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: connectomics-pipeline-hpa
  namespace: connectomics
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: connectomics-pipeline
  minReplicas: 10
  maxReplicas: 1000  # Scale up to 1000 nodes for peak load
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Object
    object:
      metric:
        name: chunks_per_second
      describedObject:
        apiVersion: v1
        kind: Service
        name: connectomics-pipeline
      target:
        type: AverageValue
        averageValue: 1000  # Target 1000 chunks per second
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 10
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: connectomics-data-pvc
  namespace: connectomics
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Pi  # 10 Petabytes for exabyte-scale data
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: connectomics-cache-pvc
  namespace: connectomics
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Pi  # 1 Petabyte for caching
  storageClassName: fast-ssd

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: connectomics-pipeline-monitor
  namespace: connectomics
spec:
  selector:
    matchLabels:
      app: connectomics-pipeline
  endpoints:
  - port: http
    interval: 30s
    path: /metrics

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: connectomics-pipeline-pdb
  namespace: connectomics
spec:
  minAvailable: 80%  # Ensure 80% availability during maintenance
  selector:
    matchLabels:
      app: connectomics-pipeline

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: connectomics-network-policy
  namespace: connectomics
spec:
  podSelector:
    matchLabels:
      app: connectomics-pipeline
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: connectomics
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 29500
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: connectomics
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 29500
  - to: []  # Allow all outbound traffic
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

---
apiVersion: batch/v1
kind: Job
metadata:
  name: connectomics-init-job
  namespace: connectomics
spec:
  template:
    spec:
      containers:
      - name: init
        image: connectomics:latest
        command: ["python"]
        args:
        - "/app/init_production_environment.py"
        - "--setup-storage"
        - "--validate-config"
        - "--preload-models"
        env:
        - name: STORAGE_CREDENTIALS
          valueFrom:
            secretKeyRef:
              name: connectomics-secrets
              key: storage-credentials
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
        - name: data-volume
          mountPath: /data
        - name: secrets-volume
          mountPath: /app/secrets
          readOnly: true
      volumes:
      - name: config-volume
        configMap:
          name: connectomics-config
      - name: data-volume
        persistentVolumeClaim:
          claimName: connectomics-data-pvc
      - name: secrets-volume
        secret:
          secretName: connectomics-secrets
      restartPolicy: OnFailure
      backoffLimit: 3

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: connectomics-monitoring-config
  namespace: connectomics
data:
  prometheus-rules.yaml: |
    groups:
    - name: connectomics.rules
      rules:
      - alert: HighMemoryUsage
        expr: container_memory_usage_bytes{container="connectomics-worker"} / container_spec_memory_limit_bytes{container="connectomics-worker"} > 0.9
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage in connectomics pipeline"
          description: "Memory usage is above 90% for 5 minutes"
      
      - alert: HighGPUUsage
        expr: nvidia_gpu_memory_used_bytes / nvidia_gpu_memory_total_bytes > 0.95
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High GPU memory usage"
          description: "GPU memory usage is above 95% for 2 minutes"
      
      - alert: HighErrorRate
        expr: rate(connectomics_processing_errors_total[5m]) / rate(connectomics_chunks_processed_total[5m]) > 0.01
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "High error rate in connectomics processing"
          description: "Error rate is above 1% for 1 minute"
      
      - alert: LowThroughput
        expr: rate(connectomics_chunks_processed_total[5m]) < 100
        for: 10m
        labels:
          severity: warning
        annotations:
          summary: "Low processing throughput"
          description: "Processing throughput is below 100 chunks per second for 10 minutes"

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: connectomics-sa
  namespace: connectomics

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: connectomics-cluster-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "persistentvolumeclaims", "events", "configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets", "replicasets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: connectomics-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: connectomics-sa
  namespace: connectomics
roleRef:
  kind: ClusterRole
  name: connectomics-cluster-role
  apiGroup: rbac.authorization.k8s.io 